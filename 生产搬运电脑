package Computer;

public class Computer {
    private long counter = 0;
    private boolean flag = false;

    public synchronized void production(){
        if(flag){
            try {
                super.wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        else{
            System.out.println("Producting computer------");
            flag = true;
            counter++;
            System.out.println(this.getCounter() + "tai");
            super.notify();
        }

    }

    public synchronized void carry(){
        if(!flag){
            try {
                super.wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        else{
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("Carrying computer--------");
            System.out.println();
            flag = false;
            super.notify();
        }
    }

    public long getCounter(){
        return counter;
    }
}

package Computer;

public class Production implements Runnable{
    private Computer computer = null;

    public Production(Computer c){
        this.computer = c;
    }

    public void run(){
        while(true){
            this.computer.production();
        }
    }
}

package Computer;

public class VVVVV {
    public static void main(String[] args) {
        Computer c = new Computer();
        new Thread(new Production(c)).start();
        new Thread(new Carry(c)).start();
    }
}

package Computer;

public class Carry implements Runnable{
    private Computer computer = null;

    public Carry(Computer c){
        this.computer = c;
    }

    public void run(){
        while(true){
            this.computer.carry();
        }
    }
}
